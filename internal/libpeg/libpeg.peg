{
/* SPDX-FileCopyrightText: Â© 2019-2021 Nadim Kobeissi <nadim@symbolic.software>
 * SPDX-License-Identifier: GPL-3.0-only */

// This file is generated automatically from libpeg.peg.
// Do not modify.

package vplogic

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"
)

var libpegReserved = []string{
	"attacker", "passive", "active", "principal",
	"knows", "generates", "leaks",
	"phase", "public", "private", "password",
	"confidentiality", "authentication",
	"freshness", "unlinkability", "precondition",
	"ringsign", "ringsignverif",
	"primitive", "pw_hash", "hash", "hkdf",
	"aead_enc", "aead_dec", "enc", "dec",
	"mac", "assert", "sign", "signverif",
	"pke_enc", "pke_dec", "shamir_split",
	"shamir_join", "concat", "split",
	"g", "nil",
}

var libpegUnnamedCounter = 0

func libpegCheckIfReserved(s string) error {
	found := false
	switch {
	case strInSlice(s, libpegReserved):
		found = true
	case strings.HasPrefix(s, "attacker"):
		found = true
	}
	if found {
		return fmt.Errorf("cannot use reserved keyword in Name: %s", s)
	}
	return nil
}

func libpegParseModel(filePath string, verbose bool) (Model, error) {
	fileName := filepath.Base(filePath)
	if len(fileName) > 64 {
		return Model{}, fmt.Errorf("model file name must be 64 characters or less")
	}
	if filepath.Ext(fileName) != ".vp" {
		return Model{}, fmt.Errorf("model file name must have a '.vp' extension")
	}
	if verbose {
		InfoMessage(fmt.Sprintf(
			"Parsing model '%s'...", fileName,
		), "verifpal", false)
	}
	parsed, err := ParseFile(filePath)
	if err != nil {
		return Model{}, err
	}
	m := parsed.(Model)
	m.FileName = fileName
	return m, nil
}
}

Model <- Comment* Attacker:Attacker? Blocks:(Block+)? Queries:Queries? Comment* EOF {
	switch {
	case Attacker == nil:
		return nil, errors.New("no `attacker` block defined")
	case Blocks == nil:
		return nil, errors.New("no principal or message blocks defined")
	case Queries == nil:
		return nil, errors.New("no `queries` block defined")
	}
	b := Blocks.([]interface{})
	q := Queries.([]interface{})
	db := make([]Block, len(b))
	dq := make([]Query, len(q))
	for i, v := range b { db[i] = v.(Block) }
	for i, v := range q { dq[i] = v.(Query) }
	return Model{
		Attacker: Attacker.(string),
		Blocks: db,
		Queries: dq,
	}, nil
}

Attacker <- "attacker" _ '[' _ Type:AttackerType? _ ']' _ {
	if Type == nil {
		return nil, errors.New("`attacker` is declared with missing attacker type")
	}
	return Type, nil
}

AttackerType <- ("active"/"passive") {
	return string(c.text), nil
}

Block <- Comment* Block:(Phase/Principal/Message) _ Comment* {
	return Block, nil
}

Principal <- "principal" _ Name:PrincipalName _ '[' _ Comment* Expressions:(Expression*) Comment* _ ']' _ {
	e  := Expressions.([]interface{})
	de := make([]Expression, len(e))
	for i, v := range e { de[i] = v.(Expression) }
	id := principalNamesMapAdd(Name.(string))
	return Block{
		Kind: "principal",
		Principal: Principal{
			Name: Name.(string),
			ID: id,
			Expressions: de,
		},
	}, nil
}

PrincipalName <- Name:Identifier {
	err := libpegCheckIfReserved(Name.(string))
	return strings.Title(Name.(string)), err
}

Qualifier <- ("private"/"public"/"password") {
	switch string(c.text) {
		default:
			return typesEnumPrivate, nil
		case "public":
			return typesEnumPublic, nil
		case "password":
			return typesEnumPassword, nil
	}
}

Message <- Sender:PrincipalName? _ "->" _ Recipient:PrincipalName? _ ':' _ Constants:MessageConstants? {
	switch {
		case Sender == nil:
			return nil, errors.New("message sender is not defined")
		case Recipient == nil:
			return nil, errors.New("message recipient is not defined")
		case Constants == nil:
			return nil, errors.New("message constants are not defined")
	}
	senderID := principalNamesMapAdd(Sender.(string))
	recipientID := principalNamesMapAdd(Recipient.(string))
	return Block{
		Kind: "message",
		Message: Message{
			Sender: senderID,
			Recipient: recipientID,
			Constants: Constants.([]Constant),
		},
	}, nil
}

MessageConstants <- MessageConstants:(GuardedConstant/Constant)+ {
	var da []Constant
	a  := MessageConstants.([]interface{})
	for _, v := range a {
		c := v.(Value).Constant
		da = append(da, c)
	}
	return da, nil
}

Expression <- Comment* Expression:(Knows/Generates/Leaks/Assignment) _ Comment* {
	return Expression, nil
}

Knows <- "knows" _ Qualifier:Qualifier? _ Constants:Constants? {
	switch {
		case Qualifier == nil:
			return nil, errors.New("`knows` declaration is missing qualifier")
		case Constants == nil:
			return nil, errors.New("`knows` declaration is missing constant name(s)")
	}
	return Expression{
		Kind: typesEnumKnows,
		Qualifier: Qualifier.(typesEnum),
		Constants: Constants.([]Constant),
	}, nil
}

Generates <- "generates" _ Constants:Constants? {
	if Constants == nil {
		return nil, errors.New("`generates` declaration is missing constant name(s)")
	}
	return Expression{
		Kind: typesEnumGenerates,
		Qualifier: typesEnumEmpty,
		Constants: Constants.([]Constant),
	}, nil
}

Leaks <- "leaks" _ Constants:Constants? {
	if Constants == nil {
		return nil, errors.New("`leaks` declaration is missing constant name(s)")
	}
	return Expression{
		Kind: typesEnumLeaks,
		Qualifier: typesEnumEmpty,
		Constants: Constants.([]Constant),
	}, nil
}

Assignment <- Left:Constants? _ '=' _ Right:Value? {
	if Left == nil || Right == nil {
		return nil, errors.New("invalid value assignment")
	}
	switch Right.(Value).Kind {
	case typesEnumConstant:
		err := errors.New("cannot assign value to value")
		return nil, err
	}
	consts := Left.([]Constant)
	return Expression{
		Kind: typesEnumAssignment,
		Constants: consts,
		Assigned:  Right.(Value),
	}, nil
}

Constant <- Const:Identifier (_ ',' _)? {
	name := Const.(string)
	switch name {
		case "_":
		name = fmt.Sprintf("unnamed_%d", libpegUnnamedCounter)
		libpegUnnamedCounter = libpegUnnamedCounter + 1
	}
	id := valueNamesMapAdd(name)
	return Value{
		Kind: typesEnumConstant,
		Constant: Constant{
			Name: name,
			ID: id,
		},
	}, nil
}

Constants <- Constants:Constant+ {
	var da []Constant
	var err error
	a  := Constants.([]interface{})
	for _, c := range a {
		err = libpegCheckIfReserved(c.(Value).Constant.Name)
		if err != nil { break }
		da = append(da, c.(Value).Constant)
	}
	return da, err
}

Phase <- "phase" _ '[' _ Number:[0-9]+ _ ']' _ {
	a  := Number.([]interface{})
	da := make([]uint8, len(a))
	for i, v := range a { da[i] = v.([]uint8)[0] }
	n, err := strconv.Atoi(b2s(da))
	return Block{
		Kind: "phase",
		Phase: Phase{
			Number: n,
		},
	}, err
}

GuardedConstant <- '[' Guarded:Constant ']' (_ ',' _)? {
	g := Guarded.(Value)
	err := libpegCheckIfReserved(g.Constant.Name)
	return Value{
		Kind: typesEnumConstant,
		Constant: Constant{
			Name: g.Constant.Name,
			ID: g.Constant.ID,
			Guard: true,
		},
	}, err
}

Primitive <- Name:PrimitiveName '(' _ Arguments:Value+ _ ')' Check:'?'? (_ ',' _)? {
	args := []Value{}
	for _, a := range Arguments.([]interface{}) {
		args = append(args, a.(Value))
	}
	primEnum, err := primitiveGetEnum(Name.(string))
	return Value{
		Kind: typesEnumPrimitive,
		Primitive: Primitive{
			ID: primEnum,
			Arguments: args,
			Output: 0,
			Check: Check != nil,
		},
	}, err
}

PrimitiveName <- Name:Identifier {
	return strings.ToUpper(Name.(string)), nil
}

Equation <- First:Constant (_ '^' _) Second:Constant {
	return Value{
		Kind: typesEnumEquation,
		Equation: Equation{
			Values: []Value{
				First.(Value),
				Second.(Value),
			},
		},
	}, nil
}

Value <- Primitive/Equation/Constant
	
Queries <- "queries" _ '[' _ Queries:(Query*) ']' _ {
	return Queries, nil
}

Query <- Comment* Query:(QueryConfidentiality/QueryAuthentication/QueryFreshness/QueryUnlinkability) Comment* {
	return Query, nil
}
	
QueryConfidentiality <- "confidentiality?" _ Const:Constant? _ Options:QueryOptions? _ {
	switch {
		case Const == nil:
			return nil, errors.New("`confidentiality` query is missing constant")
		case Options == nil:
			Options = []QueryOption{}
	}
	return Query{
		Kind: typesEnumConfidentiality,
		Constants: []Constant{Const.(Value).Constant},
		Message: Message{},
		Options: Options.([]QueryOption),
	}, nil
}

QueryAuthentication <- "authentication?" _ Message:Message? _ Options:QueryOptions? _ {
	switch {
		case Message == nil:
			return nil, errors.New("`authentication` query is missing message")
		case Options == nil:
			Options = []QueryOption{}
	}
	return Query{
		Kind: typesEnumAuthentication,
		Constants: []Constant{},
		Message: (Message.(Block)).Message,
		Options: Options.([]QueryOption),
	}, nil
}

QueryFreshness <- "freshness?" _ Const:Constant? _ Options:QueryOptions? _ {
	switch {
		case Const == nil:
			return nil, errors.New("`freshness` query is missing constant")
		case Options == nil:
			Options = []QueryOption{}
	}
	return Query{
		Kind: typesEnumFreshness,
		Constants: []Constant{Const.(Value).Constant},
		Message: Message{},
		Options: Options.([]QueryOption),
	}, nil
}

QueryUnlinkability <- "unlinkability?" _ Consts:Constants? _ Options:QueryOptions? _ {
	switch {
		case Consts == nil:
			return nil, errors.New("`unlinkability` query is missing constants")
		case Options == nil:
			Options = []QueryOption{}
	}
	return Query{
		Kind: typesEnumUnlinkability,
		Constants: Consts.([]Constant),
		Message: Message{},
		Options: Options.([]QueryOption),
	}, nil
}

QueryOptions <- '[' _ Options:(QueryOption*) ']' _ {
	o := Options.([]interface{})
	do := make([]QueryOption, len(o))
	for i, v := range o { do[i] = v.(QueryOption) }
	return do, nil
}

QueryOption <- OptionName:Identifier _ '[' _ Message:Message _ ']' _ {
	optionEnum := typesEnumEmpty
	switch OptionName.(string) {
		case "precondition":
			optionEnum = typesEnumPrecondition
	}
	return QueryOption{
		Kind: optionEnum,
		Message: (Message.(Block)).Message,
	}, nil
}

Identifier <- Identifier:[a-zA-Z0-9_]+ {
	identifier := strings.ToLower(string(c.text))
	return identifier, nil
}

Comment <- _ "//" [^\n]* _

_ "whitespace" <- [ \t\n\r]*

EOF <- !.
