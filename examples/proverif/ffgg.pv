type skey.
type pkey.
type nonce.

fun pk(skey): pkey.
fun encrypt(bitstring, pkey): bitstring.
reduc forall x: bitstring, y: skey; decrypt(encrypt(x,pk(y)),y) = x.

free c: channel.
free M: nonce [private].

query attacker(M).

let processA(pkB: pkey) = 
	in(c,(n1: nonce, n2: nonce));
	out(c, encrypt((n1, n2, M ), pkB)).

let processB(skB: skey, pkB: pkey) = 
        new n1: nonce; new n2: nonce;
	out(c, (n1, n2));
	in(c, mes: bitstring);
	let (=n1, x1: nonce, x2: nonce) = decrypt(mes, skB) in
	out(c, (x1, encrypt((x1, x2, n1), pkB))).

process 
    new skB: skey; let pkB = pk(skB) in
    out(c, pkB);
    ((!processA(pkB)) | (!processB(skB, pkB)))
