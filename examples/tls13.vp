// SPDX-FileCopyrightText: Â© 2019-2020 Nadim Kobeissi <nadim@symbolic.software>
// SPDX-License-Identifier: GPL-3.0-only

attacker[active]

principal Client[
	generates clientRandom
	generates c
	gc = G^c
]

principal Server[
	knows private certificateKey
	knows public hostname
	generates serverRandom
	generates s
	gs = G^s
	certificate = HASH(certificateKey, hostname)
	gCertificate = G^certificateKey
]

Client -> Server: clientRandom, [gc]

Server -> Client: serverRandom, [gs]

principal Server[
	knows public derived
	knows public c_hs_traffic
	knows public s_hs_traffic
	knows public key
	knows public iv
	sharedSecretServer = gc^s
	helloHashServer = HASH(clientRandom, gc, serverRandom, gs)
	earlySecretServer = HKDF(nil, nil, nil)
	emptyHashServer = HASH(nil)
	derivedSecretServer = HKDF(earlySecretServer, derived, emptyHashServer)
	handshakeSecretServer = HKDF(derivedSecretServer, sharedSecretServer, nil)
	clientHandshakeTrafficSecretServer = HKDF(handshakeSecretServer, c_hs_traffic, helloHashServer)
	serverHandshakeTrafficSecretServer = HKDF(handshakeSecretServer, s_hs_traffic, helloHashServer)
	clientHandshakeKeyServer = HKDF(clientHandshakeTrafficSecretServer, key, nil)
	serverHandshakeKeyServer = HKDF(serverHandshakeTrafficSecretServer, key, nil)
	clientHandshakeIVServer = HKDF(clientHandshakeTrafficSecretServer, iv, nil)
	serverHandshakeIVServer = HKDF(serverHandshakeTrafficSecretServer, iv, nil)
]

principal Client[
	knows public derived
	knows public c_hs_traffic
	knows public s_hs_traffic
	knows public key
	knows public iv
	sharedSecretClient = gs^c
	helloHashClient = HASH(clientRandom, gc, serverRandom, gs)
	earlySecretClient = HKDF(nil, nil, nil)
	emptyHashClient = HASH(nil)
	derivedSecretClient = HKDF(earlySecretClient, derived, emptyHashClient)
	handshakeSecretClient = HKDF(derivedSecretClient, sharedSecretClient, nil)
	clientHandshakeTrafficSecretClient = HKDF(handshakeSecretClient, c_hs_traffic, helloHashClient)
	serverHandshakeTrafficSecretClient = HKDF(handshakeSecretClient, s_hs_traffic, helloHashClient)
	clientHandshakeKeyClient = HKDF(clientHandshakeTrafficSecretClient, key, nil)
	serverHandshakeKeyClient = HKDF(serverHandshakeTrafficSecretClient, key, nil)
	clientHandshakeIVClient = HKDF(clientHandshakeTrafficSecretClient, iv, nil)
	serverHandshakeIVClient = HKDF(serverHandshakeTrafficSecretClient, iv, nil)
]

principal Server[
	e1 = AEAD_ENC(serverHandshakeKeyServer, certificate, nil)
	certVerifyServer = SIGN(certificateKey, HASH(helloHashServer, e1))
	e2 = AEAD_ENC(serverHandshakeKeyServer, certVerifyServer, nil)
	e3 = AEAD_ENC(serverHandshakeKeyServer, gCertificate, nil)
]

Server -> Client: e1, e2, e3

principal Client[
	d1 = AEAD_DEC(serverHandshakeKeyClient, e1, nil)?
	d2 = AEAD_DEC(serverHandshakeKeyClient, e2, nil)?
	d3 = AEAD_DEC(serverHandshakeKeyClient, e3, nil)?
	_ = SIGNVERIF(d3, HASH(helloHashClient, e1), d2)?
]

principal Server[
]

queries[
	confidentiality? certificate
]
